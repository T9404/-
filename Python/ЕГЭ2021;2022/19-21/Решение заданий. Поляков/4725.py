'''
Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат три кучи камней. 
Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в одну 
из куч (по своему выбору) три камня или увеличить количество камней в куче в два раза. 
Например, пусть в первой куче 10 камней, во второй 7, а в третьей 4 камня; такую позицию 
в игре будем обозначать (10, 7, 4). Тогда за один ход можно получить любую из шести позиций: 
(13, 7, 4), (20, 7, 4), (10, 10, 4), (10, 14, 4), (10, 7, 7), (10, 7, 8). Для того чтобы делать 
ходы, у каждого игрока есть неограниченное количество камней. Игра завершается в тот момент, 
когда суммарное количество камней в кучах становится не менее 71. Победителем считается игрок, 
сделавший последний ход, т. е. первым получивший такую позицию, что в кучах всего будет 71 или 
больше камней. В начальный момент в первой куче было семь камней, во второй куче пять камней, 
в третьей куче – S камней; 1 ≤ S ≤ 58.

Ответьте на следующие вопросы:

Вопрос 1.При некотором значении S Ваня одержал победу свои первым ходом после неудачного хода Пети. 
Укажите минимальное значение S, при котором это возможно.

Вопрос 2. Найдите минимальное и максимальное значения S, при которых Петя выигрывает вторым ходом 
при любом ходе Вани.

Вопрос 3. Найдите значение S, при котором одновременно выполняются два условия: 
а) у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом 
при любой игре Пети; 
б) у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.
'''
# https://prnt.sc/g4H793OaqBlZ


from functools import lru_cache


@lru_cache(None)
def f(x, y, z, c, m):
    if (x + y + z) >= 71:
        return c % 2 == m % 2

    if c == m:
        return 0

    h = [f(x + 3, y, z, c + 1, m), f(x, y + 3, z, c + 1, m), f(x, y, z + 3, c + 1, m),
         f(x * 2, y, z, c + 1, m), f(x, y * 2, z, c + 1, m), f(x, y, z * 2, c + 1, m)]

    return any(h) if ((c + 1) % 2 == m % 2) else all(h)


answer_20, answer_21, trash_1, trash_2 = [], [], [], []


for s in range(1, 59):
    for m in range(1, 7):
        if f(s, 5, 7, 0, m) == 1:
            if m == 2:
                trash_2.append(s)
            if m == 1:
                trash_1.append(s)
            if m == 3 and not s in trash_1:
                answer_20.append(s)
            if m == 4 and not s in trash_2:
                answer_21.append(s)


# all -> any m==2
print('19 task - ', 15)

print('20 task - ', min(answer_20), max(answer_20))
print('21 task - ', answer_21[0])
