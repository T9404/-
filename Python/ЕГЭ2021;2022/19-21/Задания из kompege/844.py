'''
Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. 
Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может

  а) добавить в кучу один камень;

  б) увеличить количество камней в куче в два раза;

  в) увеличить количество камней в куче в три раза.

Игра завершается в тот момент, когда количество камней в куче становится не менее 43. 
Если при этом в куче оказалось не более 72 камней, то победителем считается игрок, 
сделавший последний ход. В противном случае победителем становится его противник 
(при этом победа учитывается как ход противника). В начальный момент в куче было S камней, 1 ≤ S ≤ 42.

Задание 19
Найдите минимальное значение S, при котором Ваня выигрывает своим первым ходом при любой игре Пети.

Задание 20.
Для игры, описанной в задании 19, определите сколько существует значений S, 
при которых у Пети есть выигрышная стратегия, причём одновременно выполняются два условия:

− Петя не может выиграть за один ход;
− Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.

Задание 21.
Для игры, описанной в задании 19, найдите минимальное и максимальное значения S, 
при которых одновременно выполняются два условия:

– у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;
– у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.

Найденные значения запишите в ответе в порядке возрастания.
'''
# https://prnt.sc/1CRMdhQg-ql8


from functools import lru_cache


def move(h):
    return h + 1, h * 2, h * 3


@lru_cache(None)
def f(h):
    if 43 <= h <= 72:
        return 'CP'
    elif h > 72:
        return 'P1'
    elif any(f(m) == 'CP' for m in move(h)):
        return 'P1'
    elif all(f(m) == 'P1' for m in move(h)):
        return 'B1'
    elif any(f(m) == 'B1' for m in move(h)):
        return 'P2'
    elif all(f(m) in ['P1', 'P2'] for m in move(h)):
        return 'B2'


task_19 = min([i for i in range(1, 42 + 1) if f(i) == 'B1'])
print(task_19)

task_20 = len([i for i in range(1, 42 + 1) if f(i) == 'P2'])
print(task_20)

task_21 = ([i for i in range(1, 42 + 1) if f(i) == 'B2'])
print(task_21[0], task_21[-1])
